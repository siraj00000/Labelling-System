{"version":3,"file":"static/js/2806.2e086bc7.chunk.js","mappings":"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","sources":["components/TableLayouts/companyList.js","pages/Dashboard/SA_Screens/Admin/CompanyAdmin/index.js","pages/Dashboard/SA_Screens/Admin/index.js","utils/actions/companyData.js"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport { DeleteAlert } from '../Sweet_Alerts';\nimport { useNavigate } from 'react-router-dom';\nimport { deleteColloction } from '../../utils/actions/category';\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: theme.palette.primary.main,\n        color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14,\n    },\n}));\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\nexport default function TableLayout({ detail, token, toggleLoader }) {\n    let nav = useNavigate();\n    // View detail\n    const viewhandler = (item) => { nav(`detail`, { state: { data: item, type: \"Company\" } }); };\n\n    // Edit collection \n    const edithandler = (id, item) => {\n        if (id) {\n            nav(`edit-company-admin`, { state: { data: item, id } });\n        }\n    };\n\n    // Delete collection\n    const deletehandler = (id) => {\n        try {\n            let url = `/api/delete-company-admin/${id}`;\n            const deleteRow = deleteColloction;\n            DeleteAlert(deleteRow, url, token)\n                .then(res => toggleLoader(res));\n        } catch (error) {\n            alert('error agaya');\n        }\n    };\n\n    return (\n        <TableContainer component={Paper} sx={{ maxHeight: '500px' }}>\n            <Table aria-label=\"customized table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell align=\"center\">company</StyledTableCell>\n                        <StyledTableCell align=\"center\">company_email</StyledTableCell>\n                        <StyledTableCell align=\"center\">pincode</StyledTableCell>\n                        <StyledTableCell align=\"center\">Status</StyledTableCell>\n                        <StyledTableCell align=\"center\">View</StyledTableCell>\n                        <StyledTableCell align=\"center\">Edit</StyledTableCell>\n                        <StyledTableCell align=\"center\">Delete</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {detail?.map((row) => {\n                        return (\n                            <StyledTableRow key={row?._id}>\n                                <StyledTableCell align=\"center\">{row.company_name}</StyledTableCell>\n                                <StyledTableCell align=\"center\">{row.company_email}</StyledTableCell>\n                                <StyledTableCell align=\"center\">{row.pincode}</StyledTableCell>\n                                <StyledTableCell align=\"center\">{row.company_active_status ? \"Active\" : \"In Active\"}</StyledTableCell>\n                                <StyledTableCell align=\"center\" onClick={() => viewhandler(row)}><VisibilityIcon sx={{ cursor: 'pointer' }} /></StyledTableCell>\n                                <StyledTableCell align=\"center\" onClick={() => edithandler(row?._id, row)}><EditIcon sx={{ cursor: 'pointer' }} /></StyledTableCell>\n                                <StyledTableCell align=\"center\" onClick={() => deletehandler(row?._id)}><DeleteForeverIcon sx={{ cursor: 'pointer' }} /></StyledTableCell>\n                            </StyledTableRow>\n                        );\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/**Plan \n * ? Company Admin's CRUD\n * @table View Company Admins\n * @form Edit Company Admins\n * @form Create Company Admins\n * @func Delete Company Admin\n */\n\nimport React, { useState } from 'react';\nimport { Alert, Box, CircularProgress, Button } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport CustomizeTitle from '../../../../../mui_theme/title';\nimport TableLayout from '../../../../../components/TableLayouts/companyList';\nimport '../admin.css';\nimport { useNavigate } from 'react-router-dom';\nimport { removeStatus, token } from '../../../../../utils/actions';\nimport Searchbar from '../../../../../components/Searchbar';\nimport Pagination from '../../../../../components/Pagination';\nimport { downloadCSV } from '../../../../../utils/actions/sub-actions';\nimport { SERVER_URL } from '../../../../../utils/constants';\nimport { fetchCompany } from '../../../../../utils/actions/companyData';\n\nconst CompanyAdmin = ({ isResponse: RES, error: err, toggleLoader }) => {\n  let nav = useNavigate();\n  const [search, setSearch] = useState('');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [companyDetail, setCompanyDetail] = useState([]);\n  const [error, setError] = useState(err);\n  const [isResponse, setResponse] = useState(RES);\n\n  React.useEffect(() => {\n    setResponse(\"0\");\n    try {\n      // Fetching Company Method\n      let companyURL = `/api/fetch-company-admin?company_name=${search}&page=${page}&limit=50`;\n      fetchCompany(token, companyURL)\n        .then(res => {\n          if (!res?.data.success) {\n            setResponse('Collection is Empty');\n            setCompanyDetail([]);\n            setTotalPages(1);\n          }\n          else {\n            setResponse('1');\n            setCompanyDetail(res?.data?.data);\n            setTotalPages(res?.data?.pages);\n          }\n        }).catch(err => {\n          setError(err);\n          removeStatus(setError);\n        });\n    } catch (error) {\n      setError(error.message);\n    }\n  }, [search, page]);\n\n  const generateCSV = () => {\n    try {\n      let URL = `/api/generate-company-csv?company_name=${search}&page=${page}`;\n      downloadCSV(token, URL)\n        .then(({ data }) => {\n          if (!data.success) return false;\n          window.open(SERVER_URL + data?.downloadURL, '_parent');\n        })\n        .catch(error => {\n          setError(error);\n          removeStatus(setError);\n        });\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const searchHandler = (value) => {\n    setSearch(value);\n    setPage(1);\n  };\n  return (\n    <div className='ca_container'>\n      {/* Error Alert */}\n      {error !== '' && <Alert severity=\"error\">{error}</Alert>}\n\n      <div className='direction-corner'>\n        <div className='direction'>\n          {/* Tittle */}\n          <CustomizeTitle text={'Company'} />\n          {isResponse === '1' || (isResponse.length <= 1 &&\n            <CircularProgress size={25} sx={{ ml: 1 }} />\n          )}\n        </div>\n\n        {/* Add company admin */}\n        <Box className='direction'>\n          <Searchbar handler={searchHandler} />\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            style={{ ml: \"5px\" }}\n            onClick={generateCSV}\n          >\n            CSV\n          </Button>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            sx={{ margin: \"0 5px\" }}\n            onClick={() => nav(`register-company-admin`,)}\n          >\n            Company Admin\n          </Button>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => nav(`create-company-admin`,)}\n          >\n            Company\n          </Button>\n        </Box>\n      </div>\n\n      {/* Error Responser */}\n      {error !== '' && <Alert severity=\"error\">{error}</Alert>}\n\n      {/* Responser */}\n      {isResponse.length > 1 && <Alert severity=\"warning\">{isResponse}</Alert>}\n\n      {/* Table */}\n      {companyDetail.length !== 0 &&\n        <TableLayout detail={companyDetail} token={token} toggleLoader={toggleLoader} />\n      }\n\n      <Pagination count={totalPages} setPage={setPage} />\n    </div>\n  );\n};\n\nexport default CompanyAdmin;\n\n","/**Road Map\n * Render table according to the type of admin\n * \n * Network\n * this screen help to connect other screen\n * only company admin crud screen and manufacture crud screen\n * */\n\nimport { Alert, Button } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport Splash from '../../../../components/splash';\nimport { token } from '../../../../utils/actions';\nimport { fetchCategory } from '../../../../utils/actions/category';\nimport { fetchCompany } from '../../../../utils/actions/companyData';\nimport CompanyAdmin from './CompanyAdmin';\nimport ManufacturerAdmin from './ManufacturerAdmin';\nconst AdminList = () => {\n    const [isLoading, setLoading] = React.useState(false);\n    const [isCompanyAdmin, setCompanyAdmin] = useState(true);\n    const [hasData, setHasData] = useState(true);\n    const [companyDetail, setCompanyDetail] = useState([]);\n    const [isResponse, setResponse] = useState('');\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        // Fetching Category Method\n        fetchCategory(token, `/api/category`)\n            .then(resc => {\n                // verify category list isn't empty \n                if (!resc.data.success) return setHasData(false);\n\n                // Fetching Company Method\n                fetchCompany(token, `/api/fetch-company-admin`)\n                    .then(res => {\n                        if (res?.data?.data?.length === 0) {\n                            setResponse('Collection is Empty');\n                        } else {\n                            setResponse('1');\n                            setCompanyDetail(res?.data?.data);\n                        }\n                    }).catch(err => {\n                        setError(err);\n                        setTimeout(() => {\n                            setError(\"\");\n                        }, 5000);\n                    });\n            })\n            .catch(err => setError(err));\n    }, [isLoading]);\n\n\n    const toggleLoader = sign => setLoading(sign);\n\n    if (isLoading) {\n        setTimeout(() => {\n            setLoading(false);\n        }, 2000);\n        return <Splash loading={isLoading} />;\n    }\n\n    if (!hasData) return <Alert severity='warning'>Make sure you have categories.</Alert>;\n\n    return (\n        <div>\n            <Button\n                sx={{ marginRight: 2 }}\n                variant={isCompanyAdmin ? \"contained\" : \"outlined\"}\n                onClick={() => setCompanyAdmin(true)}\n            >Company</Button>\n            <Button\n                variant={!isCompanyAdmin ? \"contained\" : \"outlined\"}\n                onClick={() => setCompanyAdmin(false)}\n            >Manufacturer</Button>\n            {isCompanyAdmin && <CompanyAdmin\n                isResponse={isResponse}\n                error={error}\n                toggleLoader={toggleLoader}\n            />}\n            {!isCompanyAdmin && <ManufacturerAdmin\n                companyDetail={companyDetail}\n                toggleLoader={toggleLoader}\n            />}\n        </div >\n    );\n};\n\nexport default AdminList;","import API from \"../../API\";\n\n// Fetch\nexport const fetchCompany = async (token, url) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const response = await API({\n                method: 'GET',\n                url,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                },\n            });\n            resolve(response);\n        } catch (error) {\n            reject(error?.response.data.error);\n        }\n    });\n};\n\nexport const fetchAdmins = async (token, formData) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const response = await API({\n                method: 'POST',\n                url: `/api/fetch-admin`,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                },\n                data: formData\n            });\n            resolve(response);\n        } catch (error) {\n            reject(error?.response.data.error);\n        }\n    });\n};\n\n// Insert Company admin\nexport const CompanyAdminInsert = async (token, detail) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const response = await API({\n                method: 'POST',\n                url: `/api/insert-company-admin`,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                },\n                data: detail\n            });\n            resolve(response);\n        } catch (error) {\n            reject(error?.response.data.error);\n        }\n    });\n};\n\nexport const CompanyAdminRegistration = async (token, detail) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const response = await API({\n                method: 'POST',\n                url: `/api/auth/register`,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                },\n                data: detail\n            });\n            resolve(response);\n        } catch (error) {\n            reject(error?.response.data.error);\n        }\n    });\n};\n\n// Update Company Admin \nexport const updateCompanyAdmin = async (url, token, reqBody) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const response = await API({\n                method: 'PUT',\n                url: url,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                },\n                data: reqBody\n            });\n            if (response) resolve(response);\n            else reject(response);\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\n\n// Update manufacturer \nexport const updateManufacturer = async (url, token, reqBody) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const response = await API({\n                method: 'PUT',\n                url: url,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                },\n                data: reqBody\n            });\n            if (response) resolve(response);\n            else reject(response);\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\n// Delete manufacturer \nexport const deleteManufacturer = async (url, token, email) => {\n    API({\n        method: 'DELETE',\n        url: url,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        },\n        data: { email }\n    });\n};\n\n// Reset Sub Admin Password\nexport const resetUserPassword = (token, URL, body) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const response = await API({\n                method: 'PUT',\n                url: URL,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                },\n                data: body\n            });\n            resolve(response);\n        } catch (error) {\n            reject(error?.response.data.error);\n        }\n    });\n};  "],"names":["StyledTableCell","styled","TableCell","theme","tableCellClasses","backgroundColor","palette","primary","main","color","common","white","fontSize","StyledTableRow","TableRow","action","hover","border","TableLayout","detail","token","toggleLoader","nav","useNavigate","TableContainer","component","Paper","sx","maxHeight","Table","TableHead","align","TableBody","map","row","company_name","company_email","pincode","company_active_status","onClick","state","data","type","Visibility","cursor","id","_id","item","Edit","url","deleteRow","deleteColloction","DeleteAlert","then","res","error","alert","deletehandler","DeleteForever","RES","isResponse","err","useState","search","setSearch","page","setPage","totalPages","setTotalPages","companyDetail","setCompanyDetail","setError","setResponse","React","companyURL","fetchCompany","success","pages","catch","removeStatus","message","className","Alert","severity","text","length","CircularProgress","size","ml","Box","Searchbar","handler","value","Button","variant","startIcon","Add","style","URL","downloadCSV","window","open","SERVER_URL","downloadURL","margin","Pagination","count","isLoading","setLoading","isCompanyAdmin","setCompanyAdmin","hasData","setHasData","useEffect","fetchCategory","resc","setTimeout","sign","loading","marginRight","ManufacturerAdmin","Promise","resolve","reject","API","method","headers","response","fetchAdmins","formData","CompanyAdminInsert","CompanyAdminRegistration","updateCompanyAdmin","reqBody","updateManufacturer","resetUserPassword","body"],"sourceRoot":""}